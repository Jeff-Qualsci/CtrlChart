---
title: "AGM Potency Control Charts"
author: "Jeffrey R. Weidner"
format: pdf
editor: visual

knitr: 
  opts_chunk: 
    collapse: true
    echo: false
    warning: false
    message: false
---

## Purpose

Document the **PotCtrlCht.R** script, so that it can be adapted into a Shiny webtool for the Assay Guidance Manual.

This application generates [Control Charts](https://www.itl.nist.gov/div898/handbook/pmc/section3/pmc3.htm) for potency data derived from bioassays. Reference compound(s) are tested in each run on an assay and may be tested on one or more plates of the experiment.

Control charts are used to monitor a process in order to demonstrate reproducibility and identify the potential problems which should be investigated. In general control charts track both a measurement and the variability in that measurement. Potency data have a log-Normal distribution, so the data must be transformed to log10 values before performing any statistical analysis. The R package qichart2 will be used for most of the data analysis. The package is available on CRAN, but the [source code](https://rdrr.io/cran/qicharts2/) may be useful for further customization of graphs.

## Test Data

A separate script, **PotCCTestData.R**, has been created to generate test potency data as a .csv file. Data files should have a minimum of 2 columns. The first column identifies the Experiment/Run and is recommended that this be a date, though a strings would also be acceptable. (Note the team should discuss requiring this be a date.) The second required column contains the potency measurements for the reference compound. The optional 3rd column would serve to distinguish between replicates run in the same experiment. This column is not currently used, but might be useful for labelling points in graphs or as a reference to the user for generated reports.

```{r}

library(tidyverse)

# Seed for reproducible examples remove or change for different random data set
set.seed(19620903)

# Function to generate test data with the same number of replicates per run

tstdata <- function(TrueMeas, TrueMSR, NumRun, NumRep, Dates = TRUE) {
  
  FileName <- paste('TestData/cc_data', TrueMeas, TrueMSR, NumRun, NumRep, sep = '_' )
  FileName <- paste0(FileName, ".csv")
  
  TrueMeas <- log10(TrueMeas)
  StdDev <- log10(TrueMSR) / (2 * sqrt(2))
  Run <- if(Dates){
    seq(from = mdy('1/1/2023'), by = '1 week', length.out = NumRun)
  } else {c(1:NumRun)}
  
  Data <- rnorm(n = NumRun * NumRep, mean = TrueMeas, sd = StdDev)
  Run <- rep(Run, each = NumRep)
  Replicate_ID <- rep(1:NumRep, times = NumRun)
  
  Output <- if (NumRep == 1)  {
    tibble(Run, Data) %>% 
      mutate(Data = 10 ^ Data)
  }  else {
    tibble(Run, Replicate_ID, Data) %>% 
    mutate(Data = 10 ^ Data)}
  
  write_csv(Output, file = FileName)
  
  Output
}

TestData <- tstdata(TrueMeas = 10, TrueMSR = 3, NumRun = 50, NumRep =1,  Dates = TRUE)

```

The tstdata function generates an ordered set of test data based on the supplied potency (TrueMeas), variability(TrueMSR), number of runs(NumRun), and the number of replicates/run (NumRep). Dates are the default Run identifier.

## Application Functions

The qicharts2 package is used to calculate the control limits from the log10 transformed potency data for both the data (individual or mean) and variability (moving range or standard deviation) charts. However it's built in charting functions will only generate charts with the log transformed data, which may complicate interpretation for users. Instead the calculated control values and variability measurements are transformed (10^controlÂ value^) back to the linear scale. Graphs are then made with the linear data plotted on a log10 y-axis.

## Server Functionality

```{r}
# Server 
# Environment set up-------------------------------------

library(tidyverse)
library(qicharts2)
library(slider)

# Control chart functions --------------------------------

pow10 <- function(x) { 10 ^ x }

# Basic control chart with log scale for y axis with center line and control limits -----------------
log_ctrl_cht <- function(plotdata) {
  
  chart <- ggplot(plotdata, aes(x = Run, y = Data, group = Line, color = Lines)) +
    geom_line() +
    geom_point(data = plotdata %>% filter(Line == 'Data'), show.legend = FALSE) +
    scale_colour_manual(values = c('Data'= 'black', 'Center Line' = 'mediumblue', 'Control Limit' = 'red')) +
    scale_y_continuous(trans = "log10") +
    theme_linedraw() +
    theme(legend.position = 'right')
}

# MSR Analysis and Charts -----------------------------------

msrchart <- function(runs, data,msrtype, usrtitle) {
  
  MSRChart <- qic(x = runs,
                  y = data, 
                  chart = 'run',
                  xlab = 'Run Date',
                  ylab = msrtype,
                  title = usrtitle)
}

msr_ind <- function(df) {
  MSRData <- df %>% 
      mutate(Lst6_sd = slide_dbl(Log10Data, sd, .before = 5, .complete = TRUE),
             Lst6_MSR = 10 ^ (2 * sqrt(2) * Lst6_sd),
             Cumm_sd = slide_dbl(Log10Data, sd, .before = Inf, .complete = TRUE),
             Cumm_MSR = 10 ^ (2 * sqrt(2) * Cumm_sd)) %>% 
      filter(row_number() >5)
  }
  
msr_rep <- function(df) {
  startdate <- df$Run[5]
  
  MSRData <- df %>% 
    mutate(Log10Data = log10(Data),
           Cumm_sd = slide_dbl(Log10Data, sd, .before = Inf, .complete = TRUE),
           Cumm_MSR = 10 ^ (2 * sqrt(2) * Cumm_sd)) %>% 
    group_by(Run) %>% 
    summarise(Cumm_MSR = last(Cumm_MSR)) %>% 
    ungroup() %>% 
    filter(Run > startdate)
}

# Individual Data Analysis ---------------------------
ind_charts <- function(usrdata, usrtitle) {

  ChartData <- usrdata %>% 
    group_by(Run) %>% 
    summarise(Data = first(Data)) %>% 
    ungroup() %>% 
    mutate(Log10Data = log10(Data),
           MRLog = abs(slide_dbl(Log10Data, diff, .before = 1, .complete = TRUE)),
           FMR = pow10(MRLog))
  
  # Individual Chart
  IChartSumm <- summary(qic(ChartData$Run, ChartData$Log10Data, chart = 'i'))
  IChartStats <- as_tibble(IChartSumm) 
  IChartStats <- IChartStats %>% 
    mutate(across(contains('CL'), pow10),
           across(contains('CL'), ~ signif(.x, digits = 3)))
  
  PlotData <- ChartData %>% 
    select(Run, Data) %>% 
    mutate(CL = IChartStats$CL,
           UCL = IChartStats$aUCL,
           LCL = IChartStats$aLCL) %>% 
    pivot_longer(cols = !Run, names_to = 'Line', values_to = 'Data') %>% 
    mutate(Lines = if_else(Line == 'Data', 'Data',
                           if_else(Line == 'CL', 'Center Line', 'Control Limit')))
  
  IChart <- log_ctrl_cht(plotdata = PlotData)
  IChart <- IChart +
    labs(title = paste0('Individual Chart - ', usrtitle),
         y = 'Potency')
  
  # Moving Range Chart
  
  MRChartSumm <- summary(qic(ChartData$Run, ChartData$MRLog, chart = 'mr'))
  MRChartStats <- as_tibble(MRChartSumm) 
  MRChartStats <- MRChartStats %>% 
    mutate(across(contains('CL'), pow10),
           across(contains('CL'), ~ signif(.x, digits = 3)))
  
  PlotData <- ChartData %>% 
    select(Run, FMR) %>% 
    rename(Data = FMR) %>% 
    mutate(CL = MRChartStats$CL,
           UCL = MRChartStats$aUCL,
           LCL = MRChartStats$aLCL) %>% 
    pivot_longer(cols = !Run, names_to = 'Line', values_to = 'Data') %>% 
    mutate(Lines = if_else(Line == 'Data', 'Data',
                           if_else(Line == 'CL', 'Center Line', 'Control Limit')))
  
  MRChart <- log_ctrl_cht(plotdata = PlotData)
  MRChart <- MRChart +
    labs(title = paste0('Fold Moving Range Chart - ', usrtitle),
         y = 'Fold Moving Range')

  MSRData <- msr_ind(ChartData) 

  CummMSRChart <- msrchart(runs = MSRData$Run,
             data = MSRData$Cumm_MSR,
             msrtype = 'Cummulative MSR',
             usrtitle = paste0('Run Chart Cummulative MSR ', usrtitle))

  CummMSRSumm <-summary(CummMSRChart)

  Lst6MSRChart <-  msrchart(runs = MSRData$Run,
             data = MSRData$Lst6_MSR,
             msrtype = 'MSR(last 6 Runs)',
             usrtitle = paste0('Run Chart MSR(last 6 Runs) ', usrtitle))

  Lst6MSRSumm <- summary(Lst6MSRChart)
  
  Output <- list(ChartData = ChartData, DataChart = IChart, DataChartStats = IChartStats, VarChart = MRChart, VarChartStats = MRChartStats, MSRData = MSRData, Lst6MSRChart = Lst6MSRChart, Lst6MSRSumm = Lst6MSRSumm, CummMSRChart = CummMSRChart, CummMSRSumm = CummMSRSumm)
}

# Replicate Standard Deviation Charts ------------------------

xbars_charts <- function(usrdata, usrtitle) {
  
  usrdata <- usrdata %>% 
    mutate(Log10Data = log10(Data))
  
  ChartData <- usrdata %>% 
    group_by(Run) %>% 
    summarise(Data = mean(Log10Data),
              FSD = sd(Log10Data)) %>% 
    ungroup() %>% 
    mutate(across(!Run, pow10))
  
  # Xbar Chart
  XbarChartSumm <- summary(qic(usrdata$Run, usrdata$Log10Data, chart = 'xbar'))
  XbarChartStats <- as_tibble(XbarChartSumm) 
  XbarChartStats <- XbarChartStats %>% 
    mutate(across(contains('CL'), pow10),
           across(contains('CL'), ~ signif(.x, digits = 3)))
  
  PlotData <- ChartData %>% 
    select(Run, Data) %>% 
    mutate(CL = XbarChartStats$CL,
           UCL = XbarChartStats$aUCL,
           LCL = XbarChartStats$aLCL) %>% 
    pivot_longer(cols = !Run, names_to = 'Line', values_to = 'Data') %>% 
    mutate(Lines = if_else(Line == 'Data', 'Data',
                           if_else(Line == 'CL', 'Center Line', 'Control Limit')))
  
  XbarChart <- log_ctrl_cht(plotdata = PlotData)
  XbarChart <- XbarChart +
    labs(title = paste0('Xbar Chart - ', usrtitle),
         y = 'Potency')
  
  # S Chart
  
  SChartSumm <- summary(qic(usrdata$Run, usrdata$Log10Data, chart = 's'))
  SChartStats <- as_tibble(SChartSumm) 
  SChartStats <- SChartStats %>% 
    mutate(across(contains('CL'), pow10),
           across(contains('CL'), ~ signif(.x, digits = 3)))
  
  PlotData <- ChartData %>% 
    select(Run, FSD) %>% 
    rename(Data = FSD) %>% 
    mutate(CL = SChartStats$CL,
           UCL = SChartStats$aUCL,
           LCL = SChartStats$aLCL) %>% 
    pivot_longer(cols = !Run, names_to = 'Line', values_to = 'Data') %>% 
    mutate(Lines = if_else(Line == 'Data', 'Data',
                           if_else(Line == 'CL', 'Center Line', 'Control Limit')))
  
  SChart <- log_ctrl_cht(plotdata = PlotData)
  SChart <- SChart +
    labs(title = paste0('S Chart - ', usrtitle),
         y = 'Fold Std. Dev.')
  
  MSRData <- msr_rep(usrdata)
  
  CummMSRChart <- msrchart(runs = MSRData$Run,
                           data = MSRData$Cumm_MSR,
                           msrtype = 'Cummulative MSR',
                           usrtitle = paste0('Run Chart Cummulative MSR ', usrtitle))
  
  CummMSRSumm <- summary(CummMSRChart) 
  
  Output <- list(ChartData = ChartData, DataChart = XbarChart, DataChartStats = XbarChartStats, VarChart = SChart, VarChartStats = SChartStats, MSRData = MSRData, CummMSRChart = CummMSRChart, CummMSRSumm = CummMSRSumm)
}

```

## User Input

The user will upload a .csv data file with 2 or 3 columns to UsrData. The uploaded file should be consistent with the description in the Test Data section. The user may also specify a string to be used in the report header and subtitle in the generated plots.

```{r}
# Client outline ----------------------------------------
# User specifies if runs are identified by dates and a title for the generated output
UsrTitle <- 'Potency 123456'

# Import data and check file
UsrData <- read_csv(file = 'TestData/cc_data_10_3_50_1.csv')


```

After user data is uploaded, it should be checked for the following:

1.  Data types for columns (Run = *date* or *char*, Data = *dbl,*

2.  If less than 6 runs, warn user that they must have at least 6 runs for the MSR chart.

Currently the ReplicateID field is not used in the application, but it may be used to identify specific data points in future reports, if there are outliers.

## Data Analysis

Data is sorted by UsrData\$Run to ensure time series order, if that column is a *date*.

```{r}

# Prepare data for charting
UsrData <- if (is.Date(UsrData$Run)){UsrData %>% 
    arrange(Run ) }

# Determine number of replicates to select charts to create
RepCount <- UsrData %>% 
  group_by(Run) %>% 
  summarise(Reps = n(),
            Ind = Reps == 1) %>% 
  ungroup()

# Determine which types of charts to use. 
# A string is assigned, in case > 2 options desired for future development (e.g. range vs SD charts for rep data)

ChartType <- if (max(RepCount$Reps) == 1 | sum(RepCount$Ind) / length(RepCount) > 0.4) {'ind'
} else {'rep'} 

Report <- if (ChartType == 'ind') {
  ind_charts(UsrData, UsrTitle)
} else{
  xbars_charts(UsrData, UsrTitle)
}
```

The data is summarized to determine if replicates exist. If there is only 1 value/run the individual analysis is run. **If most of the runs are individuals, the first value of any run with replicates is included in the individual analysis. If the majority of the runs are replicate data, then the replicate path is chosen.**

Final business rules for this should be discussed with the broader team. Additionally qicharts2 only uses standard deviation for the variability analysis. If a control chart based on range is needed, that will need to be coded from scratch.

If 6 or more runs are included in the user data, then MSR values are calculated. Currently the 6 run moving window is only implemented for the individual (n=1) data sets. Cummulative MSR's are created for both types of data.

**A Report object is returned which consists of an R list containing all the individual charts and tables** as shown below. For consistency in the application the control charts and summaries are named Data for the actual potency values and Var for the variability analyses.

### Individual Analysis:

1.  ChartData - Data values used in the calculations and accompanying charts.

2.  DataChart - An Individual Chart of the potency data with control limits.

3.  DataChartStats - The summary of the control values and flags for the Individual Chart with the Center Line and Control Limit values converted back to the linear scale.

4.  VarChart - A Moving Range Chart. The y-axis is labeled Moving Fold Range due to the antiloging of the moving range data.

5.  VarChartStats - Summary of the control values and flags for the moving range chart. Center Line and Control Limits converted to linear scale.

6.  Lst6MSRChart - Run chart of the 6 run moving MSR generated with qicharts2.

7.  Lst6MSRSumm - Summary statistics and flags from the Lst6MSR Chart.

8.  CummMSRChart - Run chart of cummulative MSR values generated with qicharts2.

9.  CummMSRSumm - Summary statistics and flags from the Cumm6MSR Chart.

### Replicate Analysis:

1.  ChartData - Data values used in the calculations and accompanying charts.

2.  DataChart - An Xbar Chart of the geometric mean potency data with control limits.

3.  DataChartStats- The summary of the control values and flags for the Xbar Chart with the Center Line and Control Limit values converted back to the linear scale.

4.  VarChart - A Standard Deviation Chart. The y-axis is labeled Fold Standard Deviation due to the antiloging of the SD data.

5.  VarChartStats - Summary of the control values and flags for the standard deviation chart. Center Line and Control Limits converted to linear scale.

6.  CummMSRChart - Run chart of cummulative MSR values generated with qicharts2.

7.  CummMSRSumm - Summary statistics and flags from the Cumm6MSR Chart.

## User Report

### Individual data (no replicates)

Note details presented for the Individuals analysis (ind_charts function). A similar approach is used for the replicates analysis (xbars_charts functin). These functions are part of the R server code.

```{r}

Report$ChartData

```

```{r}
Report$DataChart
Report$DataChartStats
```

The Individual Chart now displays the potency values and control limits transformed back to the original linear scale of the data. The stats tables will be trimmed to only the relevant data for the final report, but the data in the full table will be useful in customizing the report for the user. For example the runs.signal and sigma.signal values \> 0 indicate probable special cause variation that should be investigated.

```{r}
Report$VarChart

UsrData <- UsrData %>% 
  mutate(Log10Data = log10(Data))

QiMR <- qic(UsrData$Run, UsrData$Log10Data, chart = 'mr')
QiMR

```

The antilog Moving Range becomes Moving Fold Range with a lower limit of 1 which corresponds to a range of 0. Note while the Fold Moving Range plot appears to have a few points outside of the control limits, the moving range plot of the log10(Potency) data generated by qicharts2 does not. I'm attempting to follow up on this discrepency but might need some more detailed statistics advice.

```{r}
Report$Lst6MSRChart
Report$CummMSRChart
```

MSR Run charts are generated if there are at least 6 runs. No control limits are generated, since the variance of MSR is not normal. The Cummulative MSR Chart uses all data prior to each run.A 6-run moving window for MSR is also calculated for the individual data. Further work is required to enable this for data sets with replicates within the runs. These charts are unchanged from the previous version and generated by qicharts2. The plan is to overlay the 2 lines in future version when the moving window MSR for replicates is completed.

### Replicate Data

```{r}
# Import data and check file
UsrData <- read_csv(file = 'TestData/cc_data_10_3_50_6.csv')

# Prepare data for charting
UsrData <- if (is.Date(UsrData$Run)){UsrData %>% 
    arrange(Run ) }

# Determine number of replicates to select charts to create
RepCount <- UsrData %>% 
  group_by(Run) %>% 
  summarise(Reps = n(),
            Ind = Reps == 1) %>% 
  ungroup()

# Determine which types of charts to use. 
# A string is assigned, in case > 2 options desired for future development (e.g. range vs SD charts for rep data)

ChartType <- if (max(RepCount$Reps) == 1 | sum(RepCount$Ind) / length(RepCount) > 0.4) {'ind'
} else {'rep'} 

Report <- if (ChartType == 'ind') {
  ind_charts(UsrData, UsrTitle)
} else{
  xbars_charts(UsrData, UsrTitle)
}

UsrData
Report$ChartData
Report$DataChart
Report$VarChart
Report$CummMSRChart
```

Currently only cumulative MSR's are calculated due to limitations in the slider package. I have some ideas on how to do a 6-run moving window with variable replicate number, but I'm still exploring solutions.

## Next Steps

1.  Moving window (6 or variable) for MSR of replicate data.

2.  More testing data sets for specific scenarios.

3.  Business rule discussion.

4.  Customizing reports based on the run.signal and sigma.signal fields in the stats tables.
